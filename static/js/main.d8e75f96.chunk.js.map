{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","heplers/validators.ts","components/Input/Input.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","urlsValidation","url","test","simpleValidation","inputValue","length","Input","React","memo","name","value","onChange","onblur","isInvalid","conditions","htmlFor","id","classNames","type","onBlur","placeholder","required","NewMovie","onAdd","useState","setTitle","setDescription","setImdbId","setImgUrl","setImdbUrl","inputConditions","setInputConditions","reset","useCallback","handleBlur","event","target","handleChange","onSubmit","preventDefault","disabled","Object","values","some","condition","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8e75f96.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const urlsValidation = (url: string) => {\n  return /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(url);\n};\n\nexport const simpleValidation = (inputValue: string) => {\n  return inputValue.length > 0 && !/^\\s+$/.test(inputValue);\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport {\n  ChangeEvent,\n  InputConditions,\n  Keys,\n} from '../../types/customTypes';\n\nexport const Input: React.FC<Props> = React.memo(\n  ({\n    name,\n    value,\n    onChange,\n    onblur,\n    conditions,\n  }) => {\n    const isInvalid = conditions[name] === false;\n\n    return (\n      <label htmlFor={name} className=\"new-movie__label\">\n        <input\n          id={name}\n          className={classNames('new-movie__input', {\n            'new-movie__input--invalid': isInvalid,\n          })}\n          type=\"text\"\n          name={name}\n          value={value}\n          onChange={onChange}\n          onBlur={onblur}\n          placeholder={name}\n          required\n        />\n        <p className=\"new-movie__error\">{isInvalid && `Invalid ${name}`}</p>\n      </label>\n    );\n  },\n);\n\ninterface Props {\n  name: Keys,\n  value: string,\n  onChange: (event: ChangeEvent) => void,\n  onblur: (event: React.FocusEvent<HTMLInputElement, Element>) => void,\n  conditions: InputConditions,\n}\n","/* eslint-disable default-case */\nimport React, { useCallback, useState } from 'react';\nimport { simpleValidation, urlsValidation } from '../../heplers/validators';\nimport { ChangeEvent, InputConditions } from '../../types/customTypes';\n//\nimport { Input } from '../Input/Input';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = React.memo(({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [inputConditions, setInputConditions] = useState<InputConditions>({\n    title: null,\n    imdbId: null,\n    imgUrl: null,\n    imdbUrl: null,\n  });\n\n  const reset = useCallback(() => {\n    setTitle('');\n    setDescription('');\n    setImdbId('');\n    setImgUrl('');\n    setImdbUrl('');\n    setInputConditions({\n      title: null,\n      imdbId: null,\n      imgUrl: null,\n      imdbUrl: null,\n    });\n  }, []);\n\n  const handleBlur = useCallback((event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n\n    switch (name) {\n      case 'title':\n        setInputConditions({\n          ...inputConditions,\n          title: simpleValidation(title),\n        });\n        break;\n      case 'imdbId':\n        setInputConditions({\n          ...inputConditions,\n          imdbId: simpleValidation(imdbId),\n        });\n        break;\n      case 'imgUrl':\n        setInputConditions({\n          ...inputConditions,\n          imgUrl: urlsValidation(imgUrl),\n        });\n        break;\n      case 'imdbUrl':\n        setInputConditions({\n          ...inputConditions,\n          imdbUrl: urlsValidation(imdbUrl),\n        });\n    }\n  }, [title, imdbId, imgUrl, imdbUrl]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newMovie = {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    };\n\n    onAdd(newMovie);\n    reset();\n  };\n\n  const handleChange = useCallback((event: ChangeEvent) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        break;\n      case 'description':\n        setDescription(value);\n        break;\n      case 'imdbId':\n        setImdbId(value);\n        break;\n      case 'imgUrl':\n        setImgUrl(value);\n        break;\n      case 'imdbUrl':\n        setImdbUrl(value);\n        break;\n    }\n  }, []);\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"new-movie__form\"\n    >\n      <Input\n        name=\"title\"\n        value={title}\n        onChange={handleChange}\n        onblur={handleBlur}\n        conditions={inputConditions}\n      />\n      <textarea\n        className=\"new-movie__input\"\n        name=\"description\"\n        value={description}\n        placeholder=\"description\"\n        onChange={handleChange}\n      />\n      <Input\n        name=\"imdbId\"\n        value={imdbId}\n        onChange={handleChange}\n        onblur={handleBlur}\n        conditions={inputConditions}\n      />\n      <Input\n        name=\"imgUrl\"\n        value={imgUrl}\n        onChange={handleChange}\n        onblur={handleBlur}\n        conditions={inputConditions}\n      />\n      <Input\n        name=\"imdbUrl\"\n        value={imdbUrl}\n        onChange={handleChange}\n        onblur={handleBlur}\n        conditions={inputConditions}\n      />\n      <button\n        type=\"submit\"\n        disabled={Object.values(inputConditions).some(condition => condition === false\n          || condition === null)}\n        className=\"new-movie__button\"\n      >\n        Add\n      </button>\n    </form>\n  );\n});\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}