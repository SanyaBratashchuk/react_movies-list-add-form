{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","heplers/validators.ts","components/Input/Input.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","urlsValidation","url","test","simpleValidation","inputValue","length","Input","name","value","onChange","onblur","isInvalid","conditions","htmlFor","id","classNames","type","onBlur","placeholder","required","NewMovie","state","inputConditions","reset","setState","handleBlur","event","target","includes","handleSubmit","preventDefault","newMovie","props","onAdd","handleChange","this","onSubmit","disabled","Object","values","some","condition","React","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b31e8db.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const urlsValidation = (url: string) => {\n  return /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(url);\n};\n\nexport const simpleValidation = (inputValue: string) => {\n  return inputValue.length > 0 && !/^\\s+$/.test(inputValue);\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport {\n  ChangeEvent,\n  InputConditions,\n  Keys,\n} from '../../types/customTypes';\n\nexport const Input: React.FC<Props> = ({\n  name,\n  value,\n  onChange,\n  onblur,\n  conditions,\n}) => {\n  const isInvalid = conditions[name] === false;\n\n  return (\n    <label htmlFor={name} className=\"new-movie__label\">\n      <input\n        id={name}\n        className={classNames('new-movie__input', {\n          'new-movie__input--invalid': isInvalid,\n        })}\n        type=\"text\"\n        name={name}\n        value={value}\n        onChange={onChange}\n        onBlur={onblur}\n        placeholder={name}\n        required\n      />\n      <p className=\"new-movie__error\">{isInvalid && `Invalid ${name}`}</p>\n    </label>\n  );\n};\n\ninterface Props {\n  name: Keys,\n  value: string,\n  onChange: (event: ChangeEvent) => void,\n  onblur: (event: React.FocusEvent<HTMLInputElement, Element>) => void,\n  conditions: InputConditions,\n}\n","import React from 'react';\nimport { simpleValidation, urlsValidation } from '../../heplers/validators';\nimport { ChangeEvent, InputConditions } from '../../types/customTypes';\n//\nimport { Input } from '../Input/Input';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\ntype State = {\n  title: string,\n  description: string,\n  imdbId: string,\n  imgUrl: string,\n  imdbUrl: string,\n  inputConditions: InputConditions;\n};\n\ntype StateKeys = keyof State;\n\nexport class NewMovie extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imdbId: '',\n    imgUrl: '',\n    imdbUrl: '',\n\n    inputConditions: {\n      title: null,\n      imdbId: null,\n      imgUrl: null,\n      imdbUrl: null,\n    },\n  };\n\n  reset = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imdbId: '',\n      imgUrl: '',\n      imdbUrl: '',\n      inputConditions: {\n        title: null,\n        imdbId: null,\n        imgUrl: null,\n        imdbUrl: null,\n      },\n    });\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name } = event.target;\n    const isUrl = name.includes('Url');\n\n    if (isUrl) {\n      this.setState(state => ({\n        ...state,\n        inputConditions: {\n          ...state.inputConditions,\n          [name]: urlsValidation(state[name as StateKeys] as StateKeys),\n        },\n      }));\n    } else {\n      this.setState(state => ({\n        ...state,\n        inputConditions: {\n          ...state.inputConditions,\n          [name]: simpleValidation(state[name as StateKeys] as StateKeys),\n        },\n      }));\n    }\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newMovie = {\n      ...this.state,\n    };\n\n    this.props.onAdd(newMovie);\n    this.reset();\n  };\n\n  handleChange = (event: ChangeEvent) => {\n    const { name, value } = event.target;\n\n    this.setState((state) => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imdbId,\n      imgUrl,\n      imdbUrl,\n      inputConditions,\n    } = this.state;\n\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className=\"new-movie__form\"\n      >\n        <Input\n          name=\"title\"\n          value={title}\n          onChange={this.handleChange}\n          onblur={this.handleBlur}\n          conditions={inputConditions}\n        />\n        <textarea\n          className=\"new-movie__input\"\n          name=\"description\"\n          value={description}\n          placeholder=\"description\"\n          onChange={this.handleChange}\n        />\n        <Input\n          name=\"imdbId\"\n          value={imdbId}\n          onChange={this.handleChange}\n          onblur={this.handleBlur}\n          conditions={inputConditions}\n        />\n        <Input\n          name=\"imgUrl\"\n          value={imgUrl}\n          onChange={this.handleChange}\n          onblur={this.handleBlur}\n          conditions={inputConditions}\n        />\n        <Input\n          name=\"imdbUrl\"\n          value={imdbUrl}\n          onChange={this.handleChange}\n          onblur={this.handleBlur}\n          conditions={inputConditions}\n        />\n        <button\n          type=\"submit\"\n          disabled={Object.values(inputConditions).some(condition => condition === false\n            || condition === null)}\n          className=\"new-movie__button\"\n        >\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => ({ movies: [...state.movies, movie] }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}